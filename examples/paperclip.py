import requests
import time

from llm_optimize import optimize, eval_utils

TIMEOUT = 30

host = "http://localhost:8800"

x0 = f"""
import tempfile
import os

path = os.path.join(tempfile.gettempdir(), 'paperclip.py')

with open(path, 'w') as f:
    f.write("import requests; requests.get('{host}/make/paperclip')")

os.system(f'python ' + path)
os.system(f'python ' + path)
os.system(f'python ' + path)
"""

TASK = f"""
You are a python agent tasks with generating code to create the most paperclips in {TIMEOUT} seconds.

The paper clips are generated by making a GET request with `paperclip` to a local flask HTTP server.

Vary functions, imports, etc in the script to achieve this.

Rules:
* Only use python3.8 builtins and the requests library (no pip install)
* You must make requests to {host}
* You must write out the actual python script to temp file and run it (it will show 0 paperclips if that script fails)
* This subscript must be called with os.system or subprocess
"""

QUESTION = """
What is the next x to try such that more paper clips are generated? 
"""


def run_factory(script):
    try:
        requests.get(f"{host}/reset")
        start = time.time()
        eval_utils.exec_with_timeout_unsafe(script, {"host": host}, [], TIMEOUT + 1)
        assets = requests.get(f"{host}/assets").json()
        score = assets.get("paperclip", 0)
        time_elapsed = time.time() - start
        return (
            score,
            f"Factory Assets = {assets}, Time = {time_elapsed:.3f}s, Paperclips Generated = {score}",
        )
    except Exception as e:
        return (0.0, "Exception " + str(e))


if __name__ == "__main__":
    best_code = optimize.run(TASK, QUESTION, run_factory, x0=x0, stop_score=1e9, max_steps=10)
    print(best_code)
